name: Publish Build

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      credential_service:
        required: true
        type: string
      health_check_cmd:
        required: true
        type: string
      docker_host:
        required: true
        type: string
      branch:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      PAT_FOR_DEPLOYMENT:
        required: true
      DOCKERUSER:
        required: true
      DOCKERPASS:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PRIVATE_KEY:
        required: true

jobs:
  generate-deployment-strategy:
    runs-on: ubuntu-latest
    needs: publishbuild
    outputs:
      matrix_include: ${{ steps.generate_strategy.outputs.matrix_include }}
    container:
      image: registry.namachain.com/namachain/actions:1.0.2
      credentials:
        username: ${{ secrets.DOCKERUSER }}
        password: ${{ secrets.DOCKERPASS }}
    steps:
    - id: generate_strategy
      run: "python -m actions.deployment_strategies"
      env:
        app_name: "${{ inputs.app_name }}"
        image_tag: "${{ inputs.image_tag }}"
        credential_service: "${{ inputs.credential_service }}"
        health_check_cmd: "${{ inputs.health_check_cmd }}"
        branch: "${{ inputs.branch }}"
        gh_token: "${{ secrets.PAT_FOR_DEPLOYMENT }}"

  deployment:
    runs-on: ubuntu-latest
    needs: generate-deployment-strategy
    strategy:
      matrix:
        include: ${{ fromJSON(needs.generate-deployment-strategy.outputs.matrix_include) }}
    steps:
    - name: display input
      run: echo "${{ toJSON(fromJSON(needs.generate-deployment-strategy.outputs.matrix_include)) }}"

    - name: create key files
      run: mkdir -p ~/.ssh && echo "${{ secrets.DOCKER_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa

    - name: create secret files
      run: mkdir -p ~/producer2 && echo "{}" > ~/producer2/producer.json

    - name: accept remote host key
      run: ssh-keyscan -H ${{ inputs.docker_host }} >> ~/.ssh/known_hosts

    - name: create docker context
      run: docker context create namachain-context --default-stack-orchestrator=swarm --docker host=ssh://${{ secrets.DOCKER_USERNAME }}@${{ inputs.docker_host }}

    - name: use docker context
      run:  docker context use namachain-context

    - name: show docker version
      run: docker version

    - name: list docker process
      run: docker ps

    - name: download deployment files
      run: |
        curl --header "authorization: Bearer ${{ secrets.PAT_FOR_DEPLOYMENT }}" https://raw.githubusercontent.com/Namachain/deployment/master/deploy.sh -o deploy.sh
        curl --header "authorization: Bearer ${{ secrets.PAT_FOR_DEPLOYMENT }}" https://raw.githubusercontent.com/Namachain/deployment/master/docker-compose.India.yml -o docker-compose.India.yml
        curl --header "authorization: Bearer ${{ secrets.PAT_FOR_DEPLOYMENT }}" https://raw.githubusercontent.com/Namachain/deployment/master/docker-compose.Staging.yml -o docker-compose.Staging.yml
        chmod +x deploy.sh

    - name: login to docker registry
      run: echo ${{ secrets.DOCKERPASS }} | docker login registry.namachain.com -u ${{ secrets.DOCKERUSER }} --password-stdin

    - name: deploy app container
      run: |
        export namakey_IMAGE_TAG=latest
        export vault_IMAGE_TAG=latest
        export credsdeploy_IMAGE_TAG=latest
        export userchain_IMAGE_TAG=latest
        export userchaininit_IMAGE_TAG=latest
        export authenticator_IMAGE_TAG=latest
        export app_IMAGE_TAG=latest
        export business_IMAGE_TAG=latest
        export portal_IMAGE_TAG=latest
        export kycapp_IMAGE_TAG=latest
        export demoservice_IMAGE_TAG=latest
        export producer_IMAGE_TAG=latest
        export producerconfig_IMAGE_TAG=latest
        export ${{ matrix.app_name }}IMAGE_TAG=${{ matrix.image_tag }}

        ./deploy.sh -n -p staging -c namachain-context \
        -f docker-compose.${{ matrix.staging_env }}.yml \
        -s ${{ matrix.app_name }}

    - name: run credential continer
      # run credential container to update the credentials for the app just deployed, first, it makes sure
      # the new app container is up and running using the health_check_cmd, then it runs the provided
      # credential_service container to update the credentials
      if: matrix.health_check_cmd != '' && matrix.credential_service != ''
      run: |
        until ssh ${{ secrets.DOCKER_USERNAME }}@${{ inputs.docker_host }} 'curl ${{ matrix.health_check_cmd }}'; do sleep 10; done

        export namakey_IMAGE_TAG=latest
        export vault_IMAGE_TAG=latest
        export credsdeploy_IMAGE_TAG=latest
        export userchain_IMAGE_TAG=latest
        export userchaininit_IMAGE_TAG=latest
        export authenticator_IMAGE_TAG=latest
        export app_IMAGE_TAG=latest
        export business_IMAGE_TAG=latest
        export portal_IMAGE_TAG=latest
        export kycapp_IMAGE_TAG=latest
        export demoservice_IMAGE_TAG=latest
        export producer_IMAGE_TAG=latest
        export producerconfig_IMAGE_TAG=latest
        export ${{ matrix.app_name }}IMAGE_TAG=${{ matrix.image_tag }}

        ./deploy.sh -n -p staging -c namachain-context \
        -f docker-compose.${{ matrix.staging_env }}.yml \
        -s ${{ matrix.credential_service }}

    - name: remote ssh private key
      if: ${{ always() }}
      run: rm -rf ~/.ssh

    - name: Logout docker
      if: always()
      run: docker logout registry.namachain.com
